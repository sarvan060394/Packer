#!/bin/bash

# Read sensitive data from environment variables
cluster_url="$OPENSHIFT_CLUSTER_URL"
username="$OPENSHIFT_USERNAME"
password="$OPENSHIFT_PASSWORD"

# Log in to the OpenShift cluster
oc login "$cluster_url" --username="$username" --password="$password"

#!/bin/bash

# Prompt the user for OpenShift cluster URL
read -p "Enter OpenShift Cluster URL (e.g., https://your-cluster-url:port): " cluster_url

# Prompt the user for OpenShift username
read -p "Enter OpenShift Username: " username

# Prompt the user for OpenShift password (masked)
read -s -p "Enter OpenShift Password: " password
echo # Add a new line for a cleaner output

# Now, you can use the cluster_url, username, and password variables in your script as needed.


from flask import Flask, request, jsonify
import subprocess

app = Flask(__name__)

@app.route('/login', methods=['POST'])
def login_to_openshift():
    # Get the JSON data from the request
    data = request.get_json()

    # Extract cluster URL, username, and password from the JSON data
    cluster_url = data.get('cluster_url')
    username = data.get('username')
    password = data.get('password')

    # Create the command to run the Bash script
    command = ['./login_to_openshift.sh', cluster_url, username, password]

    try:
        # Run the Bash script
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode('utf-8')
        error = result.stderr.decode('utf-8')

        if result.returncode == 0:
            return jsonify({'status': 'success', 'output': output})
        else:
            return jsonify({'status': 'error', 'message': error})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

if __name__ == '__main__':
    app.run(debug=True)



#!/bin/bash

# Set OpenShift cluster URL and project name
cluster_url="https://your-cluster-url:port"
project_name="your-project-name"

# Set OpenShift username and password for the Docker registry
docker_registry_username="your-docker-username"
docker_registry_password="your-docker-password"
docker_registry_server="your-docker-registry-server"

# Authenticate and get an access token
token_response=$(curl -s -X POST \
  "$cluster_url/oauth/token/request" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "grant_type=password&username=$docker_registry_username&password=$docker_registry_password")

# Extract the access token from the response
access_token=$(echo "$token_response" | jq -r '.access_token')

if [ -n "$access_token" ]; then
  echo "Authentication successful. Access token obtained: $access_token"
else
  echo "Authentication failed. Please check your Docker registry credentials."
  exit 1
fi

# Create a Docker registry secret using the access token
secret_name="my-docker-secret"
secret_data='{
  ".dockerconfigjson": "'$(echo -n "{\"auths\":{\"$docker_registry_server\":{\"username\":\"$docker_registry_username\",\"password\":\"$docker_registry_password\",\"auth\":\"\"}}}" | base64 -w0)'"'
}'

create_secret_response=$(curl -s -X POST \
  "$cluster_url/apis/v1/namespaces/$project_name/secrets" \
  -H "Authorization: Bearer $access_token" \
  -H "Content-Type: application/json" \
  -d "{\"metadata\":{\"name\":\"$secret_name\"},\"type\":\"kubernetes.io/dockerconfigjson\",\"data\":$secret_data}")

if [ $? -eq 0 ]; then
  echo "Docker registry secret creation successful."
else
  echo "Docker registry secret creation failed."
fi


#!/bin/bash

# Set OpenShift cluster URL and project name
cluster_url="https://your-cluster-url:port"
project_name="your-project-name"

# Set OpenShift username and password
username="your-username"
password="your-password"

# Authenticate and get an access token
token_response=$(curl -s -X POST \
  "$cluster_url/oauth/token/request" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "grant_type=password&username=$username&password=$password")

# Extract the access token from the response
access_token=$(echo "$token_response" | jq -r '.access_token')

if [ -n "$access_token" ]; then
  echo "Authentication successful. Access token obtained: $access_token"
else
  echo "Authentication failed. Please check your credentials."
  exit 1
fi

# Create a secret with key-value pairs using the access token
secret_name="my-secret"
secret_data='{
  "data": {
    "username": "'"$username"'",
    "password": "'"$password"'",
    "other_key": "other_value"
  }
}'

create_secret_response=$(curl -s -X POST \
  "$cluster_url/apis/v1/namespaces/$project_name/secrets" \
  -H "Authorization: Bearer $access_token" \
  -H "Content-Type: application/json" \
  -d "$secret_data")

if [ $? -eq 0 ]; then
  echo "Secret creation successful."
else
  echo "Secret creation failed."
fi


****************************************************************************************************************************************
BAT
****************************************************************************************************************************************

JSON BASE64:
---------------
@echo off
setlocal

:: Define the username and password
set "username=myUsername"
set "password=myPassword"

:: Combine the username and password with a colon separator
set "credentials=%username%:%password%"

:: Use PowerShell to encode the credentials to Base64
for /f "delims=" %%b in ('powershell "[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('%credentials%'))"') do set "encodedCredentials=%%b"

:: Print the Base64-encoded credentials
echo Base64-encoded credentials: %encodedCredentials%

:: End the batch file
endlocal




@echo off
setlocal

:: Define the JSON content
set "jsonContent={\"key\":\"value\",\"another_key\":\"another_value\"}"

:: Use PowerShell to encode the JSON content to Base64
for /f "delims=" %%b in ('powershell "[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('%jsonContent%'))"') do set "auth=%%b"

:: Print the Base64-encoded JSON
echo Base64-encoded JSON: %auth%


:: End the batch file
endlocal

---------------------------------------------------------------------------------------------------------------------------------------------

Openshift Login:
-----------------------------
@REM ------------------------------------------------

@echo off
setlocal enabledelayedexpansion

REM Get the username from the user
set /p OPENSHIFT_USERNAME=Enter your OpenShift username: 

REM Get the password from the user
set /p OPENSHIFT_PASSWORD=Enter your OpenShift password: 

REM Set your OpenShift cluster URL
set OPENSHIFT_SERVER=https://your-openshift-cluster-url

REM Build the curl command with the username and password
set CURL_COMMAND=curl -k -X POST %OPENSHIFT_SERVER%/oauth/token/request -d "grant_type=password^&username=!OPENSHIFT_USERNAME!^&password=!OPENSHIFT_PASSWORD!" -H "Content-Type: application/x-www-form-urlencoded"

REM Print the curl command
echo Curl command:
echo %CURL_COMMAND%

REM Execute the curl command
%CURL_COMMAND%

endlocal
exit /b 0

-----------------------------------------------------------------------------------------------------------------
Powershell
-----------------------------------------------------------------------------------------------------------------

# Define the JSON content
$jsonContent = '{"key":"value","another_key":"another_value"}'

# Convert the JSON content to bytes and then encode to Base64
$base64EncodedJSON = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($jsonContent))

# Print the Base64-encoded JSON
Write-Host "Base64-encoded JSON: $base64EncodedJSON"

--------------------------------

# Get the OpenShift username from the user
$OPENSHIFT_USERNAME = Read-Host "Enter your OpenShift username"

# Get the OpenShift password from the user (masked)
$OPENSHIFT_PASSWORD = Read-Host "Enter your OpenShift password" -AsSecureString

# Convert the secure string to plain text
$SecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($OPENSHIFT_PASSWORD))

# Set your OpenShift cluster URL
$OPENSHIFT_SERVER = "https://your-openshift-cluster-url"

# Build the curl command with the username and password
$CURL_COMMAND = "curl -k -X POST $OPENSHIFT_SERVER/oauth/token/request -d ""grant_type=password&username=$OPENSHIFT_USERNAME&password=$SecurePassword"" -H ""Content-Type: application/x-www-form-urlencoded"""

# Print the curl command
Write-Host "Curl command:"
Write-Host $CURL_COMMAND

# Execute the curl command


Invoke-Expression $CURL_COMMAND

------------/-
function OpenShift-Login {
    $username = "achp****deb"  # Replace asterisks with your specific username

    if ($username -like "achp****deb*") {
        try {
            $password = "your-password"  # Set your password here
            $ocLogin = & oc login -u $username -p $password --server=https://your-openshift-cluster-url

            if ($LASTEXITCODE -eq 0) {
                Write-Host "Successfully logged in to OpenShift."
                return $true
            } else {
                Write-Host "Failed to log in to OpenShift."
                return $false
            }
        } catch {
            Write-Host "Error logging in to OpenShift: $_"
            return $false
        }
    } else {
        Write-Host "Username does not match the expected pattern. Skipping login."
        return $false
    }
}

function Create-Secret {
    param (
        [string] $secretName,
        [string] $username,
        [string] $password
    )

    try {
        $ocCreateSecret = & oc create secret generic $secretName --from-literal=username=$username --from-literal=password=$password

        if ($LASTEXITCODE -eq 0) {
            Write-Host "Secret created successfully."
        } else {
            throw "Error creating secret."
        }
    } catch {
        throw "Error creating secret: $_"
    }
}

function Link-Secret-To-ServiceAccount {
    param (
        [string] $secretName,
        [string] $serviceAccountName
    )

    try {
        $ocLinkSecret = & oc secrets link $serviceAccountName $secretName

        if ($LASTEXITCODE -eq 0) {
            Write-Host "Secret linked to service account ($serviceAccountName) successfully."
        } else {
            throw "Error linking secret to service account ($serviceAccountName)."
        }
    } catch {
        throw "Error linking secret to service account: $_"
    }
}

# Usage example:
try {
    $loginSuccess = OpenShift-Login

    if ($loginSuccess) {
        $secretName = "my-secret"
        $username = "achp****deb"  # Replace asterisks with your specific username
        $password = "my-password"

        Create-Secret -secretName $secretName -username $username -password $password

        $builderServiceAccount = "builder"
        $defaultServiceAccount = "default"

        Link-Secret-To-ServiceAccount -secretName $secretName -serviceAccountName $builderServiceAccount
        Link-Secret-To-ServiceAccount -secretName $secretName -serviceAccountName $defaultServiceAccount

        Write-Host "Secret created and linked successfully."
    }
} catch {
    Write-Host "Error: $_"
}

